/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    flavor = "balanced";
    tapping-term-ms = <100>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_+ {
            bindings = <&kp PLUS>;
            key-positions = <17 18>;
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_lshft {
            bindings = <&kp LSHFT>;
            key-positions = <14 15>;
        };

        combo_rshft {
            bindings = <&kp RSHFT>;
            key-positions = <20 21>;
        };

        combo_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <13 14 15 16>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <16 19>;
        };

        combo_left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <3 4>;
        };

        combo_left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
        };

        combo_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <27 28>;
        };

        combo_right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
        };

        combo_right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        combo_right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <31 32>;
        };

        combo_plus {
            bindings = <&kp LS(EQUAL)>;
            key-positions = <17 18>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <29 30>;
        };

        combo_f2 {
            bindings = <&kp F2>;
            key-positions = <2 3>;
        };

        combo_up {
            bindings = <&kp UP_ARROW>;
            key-positions = <19 7>;
        };

        combo_down {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <19 31>;
        };
    };

    behaviors {
        auto_shift: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        caps: caps {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB         &kp Q         &kp W   &kp E            &kp R        &kp T      &kp Y        &kp U        &kp I          &kp O    &kp P     &kp BSPC
&mt LCTRL ESC   &kp A         &kp S   &kp D            &kp F        &kp G      &kp H        &kp J        &kp K          &kp L    &kp SEMI  &kp APOS
&kp LSHIFT      &kp Z         &kp X   &kp C            &kp V        &kp B      &kp N        &kp M        &kp COMMA      &kp DOT  &kp FSLH  &mt RSHIFT RIGHT_GUI
&bt BT_CLR_ALL  &bt BT_SEL 0  &trans  &lt 2 BACKSPACE  &lt 1 SPACE  &kp LCTRL  &lt 3 ENTER  &lt 1 SPACE  &kp RIGHT_ALT  &trans   &trans    &trans
            >;
        };

        lower_layer {
            bindings = <
&kp LS(TILDE)    &kp LS(NUMBER_1)   &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)   &kp LS(LPAR)    &kp LS(RPAR)   &kp LS(BSLH)
&kp GRAVE        &kp N1             &kp N2      &kp N3         &kp N4        &kp N5         &kp N6         &kp N7         &kp N8         &kp N9          &kp N0         &kp BACKSLASH
&kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_MUTE  &kp DEL        &kp MINUS     &kp LS(MINUS)  &kp EQUAL      &kp LS(EQUAL)  &kp LS(COMMA)  &kp LS(PERIOD)  &kp LS(SLASH)  &kp RSHFT
&trans           &trans             &trans      &trans         &trans        &trans         &trans         &trans         &trans         &trans          &trans         &trans
            >;
        };

        raise_layer {
            bindings = <
&kp F1     &kp F2  &kp F3        &kp F4          &kp F5          &kp F6           &kp F7          &kp F8    &kp F9       &kp F10        &kp F11     &kp F12
&kp LCTRL  &trans  &msc SCRL_UP  &msc SCRL_DOWN  &kp K_BACK      &kp K_FORWARD    &kp LEFT_ARROW  &kp DOWN  &kp UP       &kp RIGHT      &kp DELETE  &kp INSERT
&trans     &trans  &trans        &trans          &msc SCRL_LEFT  &msc SCRL_RIGHT  &kp HOME        &kp END   &kp PAGE_UP  &kp PAGE_DOWN  &trans      &trans
&trans     &trans  &trans        &trans          &trans          &trans           &trans          &trans    &trans       &trans         &trans      &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
